#!/bin/bash

function print_usage() {
cat <<EOF

riff is for functions

Commands:
  build        Build a function container
  create       Build and apply a function given code
  apply        Apply function resource definitions
  delete       Delete function resource definitions
  list         List current function resources
  logs         Show logs for a function resource

  Use "riff <command> --help" for more information about a given command.

EOF
}

function print_build_usage() {
cat <<EOF

Build the function based on the code available in the path directory, using the name
  and version specified for the image that is built.

Usage:

  riff build -n <name> -v <version> -f <path>

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)
  -v, --version: the version of the function (defaults to v0001)
  -f, --filename: filename, directory, or URL for the code or resource (defaults to the current directory)

EOF
}

function print_create_usage() {
cat <<EOF

Create the resource[s] based on the resource definition[s] that the path points to.

Usage:

  riff create -f <path> -i <invoker>

Options:

  -f, --filename: filename of the function code
  -i, --invoker: name of the function invoker to use

EOF
}

function print_update_usage() {
cat <<EOF

Delete the function and re-apply its configuration.

Usage:

  riff update -f <path>

Options:

  -f, --filename: filename, directory, or URL for the resource definition[s] (defaults to the current directory)

EOF
}

function print_apply_usage() {
cat <<EOF

Apply the resource definition[s] that the path points to. A resource will be created if
  it doesn't exist yet.

Usage:

  riff apply -f <path>

Options:

  -f, --filename: filename, directory, or URL for the resource definition[s] (defaults to the current directory)

EOF
}

function print_delete_usage() {
cat <<EOF

Delete the resource definition[s] for the function specified.

Usage:

  riff delete -n <name>

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)

EOF
}

function print_list_usage() {
cat <<EOF

List the current function resources.

Usage:

  riff list

EOF
}

function print_logs_usage() {
cat <<EOF

Display the logs for a running function.

Usage:

  riff logs -n <name> [-c <container>] [-t]

Options:

  -n, --name: the name of the function (defaults to the name of the current directory)
  -c, --container: the name of the container, usually sidecar or main (defaults to sidecar)
  -t, --tail: tail the logs

EOF
}

function build() {
  echo "Building $FUNCTION $FNPATH $VERSION"
  docker build -t "projectriff/${FUNCTION}:${VERSION}" $FNPATH
}

function create() {
  if [[ "$INVOKER" == "detect" ]]
  then
    detect_invoker
  fi
  echo "Creating $INVOKER function for $FNPATH"
  create_dockerfile
  create_function_yaml
  docker build -t "projectriff/${FUNCTION}:${VERSION}" .
  kubectl apply -f $FUNCTION.yaml
}

function detect_invoker() {
  if [[ "$FNPATH" == *.sh ]]
  then
    INVOKER="shell"
  elif [[ "$FNPATH" == *.js ]]
  then
    INVOKER="node"
  else
    echo "unable to determine invoker type"
    exit 1
  fi
}

function create_dockerfile() {
cat > Dockerfile <<EOF
FROM projectriff/$INVOKER-function-invoker:0.0.2-snapshot
ENV FUNCTION_URI /$FNPATH
ADD $FNPATH /$FNPATH
EOF
cat > .dockerignore <<EOF
*
!$FNPATH
EOF
}

function create_function_yaml() {
  PROTOCOL="http"
  if [[ "${INVOKER}" == "shell" ]]; then
    PROTOCOL="stdio"
  fi
cat > $FUNCTION.yaml <<EOF
apiVersion: projectriff.io/v1
kind: Topic
metadata:
  name: $FUNCTION
spec:
  partitions: 1
---
apiVersion: projectriff.io/v1
kind: Function
metadata:
  name: $FUNCTION
spec:
  protocol: $PROTOCOL
  input: $FUNCTION
  container:
    image: projectriff/$FUNCTION:v0001
EOF
}

function update() {
  delete >/dev/null
  apply >/dev/null
  echo "Updated $FUNCTION"
}

function apply() {
  echo "Applying $FNPATH resource[s]"
  kubectl apply -f $FNPATH
}

function delete() {
  echo "Deleting $FUNCTION resource[s]"
  kubectl delete function $FUNCTION
}

function list() {
  echo "Listing function resources"
  kubectl get functions
}

function logs() {
  echo "Displaying logs for container ${CONTAINER} of function ${FUNCTION}"
  kubectl logs ${TAIL} -c ${CONTAINER} $(kubectl get pod -l function=${FUNCTION} -o jsonpath='{.items[0].metadata.name}')
}

# ======================================= FUNCTIONS END =======================================

if [[ $1 == "--help" || $1 == "-h" ]] ; then
    print_usage
    exit 0
fi

if [[ $# == 0 ]]; then
  print_usage
  exit 0
fi

COMMAND="$1"
shift

if [[ $1 == "--help" || $1 == "-h" ]] ; then
  if [[ "${COMMAND}" == "build" ]]; then
    print_build_usage
    exit 0
  elif [[ "${COMMAND}" == "create" ]]; then
    print_create_usage
    exit 0
  elif [[ "${COMMAND}" == "update" ]]; then
    print_update_usage
    exit 0
  elif [[ "${COMMAND}" == "apply" ]]; then
    print_apply_usage
    exit 0
  elif [[ "${COMMAND}" == "delete" ]]; then
    print_delete_usage
    exit 0
  elif [[ "${COMMAND}" == "list" ]]; then
    print_list_usage
    exit 0
  elif [[ "${COMMAND}" == "logs" ]]; then
    print_logs_usage
    exit 0
  fi
fi

while [[ $# > 0 ]]
do
key="$1"
case ${key} in
  -n|--name)
  FUNCTION="$2"
  shift
  ;;
  -f|--filename)
  FNPATH="$2"
  shift
  ;;
  -i|--invoker)
  INVOKER="$2"
  shift
  ;;
  -v|--version)
  VERSION="$2"
  shift
  ;;
  -c|--container)
  CONTAINER="$2"
  shift
  ;;
  -t|--tail)
  TAIL="-f"
  ;;
  --help)
  print_usage
  exit 0
  ;;
  *)
  echo ""
  echo "ERROR: Invalid option: [$1]"
  print_usage
  exit 1
  ;;
esac
shift
done

# ======================================= DEFAULTS ============================================
FUNCTION="${FUNCTION:-${PWD##*/}}"
FNPATH="${FNPATH:-.}"
INVOKER="${INVOKER:-detect}"
VERSION="${VERSION:-v0001}"
CONTAINER="${CONTAINER:-sidecar}"
# ======================================= DEFAULTS END ========================================
if [[ "${COMMAND}" == "build" ]]; then
  build
elif [[ "${COMMAND}" == "create" ]]; then
  create
elif [[ "${COMMAND}" == "update" ]]; then
  update
elif [[ "${COMMAND}" == "apply" ]]; then
  apply
elif [[ "${COMMAND}" == "delete" ]]; then
  delete
elif [[ "${COMMAND}" == "list" ]]; then
  list
elif [[ "${COMMAND}" == "logs" ]]; then
  logs
else
  echo "$COMMAND is an invalid command"
  exit 1;
fi
